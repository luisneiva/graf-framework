/* $Id:$ 
 * Creation : April 13, 2009
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            greg
 * Description:
 *   takes an instance of the ListGraph model, and writes out .dot format text for it
 */
@mainClass "graph2dot::Main"
@mainOperation "main"


package graph2dot;


require kermeta
require "platform:/resource/ListGraph/model/ListGraph.ecore"
using kermeta::standard
using kermeta::persistence
using listgraph

class Main
{

	operation printDotEdge(s:String, l:String, t:String) is do
		stdio.writeln( "  " + s + " -> " + t + " [label=" + l + "]")
	end


	operation printNavigation(nav:Navigation) is do
		nav.targets.each
			{ target | printDotEdge(nav.source.name, nav.via.label, target.name)}
	end		


	operation main() : Void is do 
		/* Initialize the EMF repository */
		var repository : EMFRepository init EMFRepository.new

		/* Create an EMF Resource, given model and metamodel URIs as String */
		var modelURI : String init "platform:/resource/ListGraph/model/My.listgraph"
		var metamodelURI : String init "platform:/resource/ListGraph/model/ListGraph.ecore"
		var resource : Resource init repository.createResource(modelURI, metamodelURI)

		/* Load the resource */
		resource.load

		// get elements from the resource
		var graph : Graph
		var navs : oset Navigation[0..*]  // multiplicity is essential!
		graph ?= resource.one()
		navs := graph.ownedNavigation
		
		stdio.writeln("digraph anonymous {")
		navs.each { nv | printNavigation(nv) }
		stdio.writeln("}")
	end
}