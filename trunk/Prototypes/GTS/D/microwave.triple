{* 
  System state for example microwave model
  Greg, May 2009
*}

{* the objects *}
m1 cooks f1
f1 cookedBy m1
m1 has b1
b1 in m1

{* their classes *}
m1 i Microwave
f1 i Food
b1 i Beeper

Microwave i Class
Food i Class
Beeper i Class

{* the Actor *}
a1 i Actor

{* Not shown in example class diagram, but the do activity of Microwave
  state Cooking refers to this attribute. *}
Food ownedAttribute temperature
temperature i Property
temperature class Food
f1 temperature 3

{* Microwave state machine *}
Microwave classifierBehavior microwaveSM
microwaveSM i StateMachine
microwaveSM region microwaveSMregion
microwaveSMregion i Region

{* Microwave state machine states *}
microwaveSMregion subvertex microwaveInitial
microwaveSMregion subvertex NotCooking
microwaveSMregion subvertex Cooking
microwaveSMregion subvertex FinishedCooking
microwaveSMregion subvertex microwaveFinal
microwaveInitial i PsuedoState
NotCooking i State
Cooking i State
FinishedCooking i State
microwaveFinal i FinalState

{* Microwave state machine transitions *}
microwaveSMregion transition microwaveInitialTrans
microwaveInitialTrans i Transition
microwaveInitialTrans source microwaveInitial
microwaveInitialTrans target NotCooking

microwaveSMregion transition cookTrans
cookTrans i Transition
cookTrans source NotCooking
cookTrans target Cooking
cookTrans trigger cookTrigger
cookTrigger i Trigger
cookTrigger event receiveCook
receiveCook i ReceiveSignalEvent
receiveCook signal cook
cook i Signal

microwaveSMregion transition stopCookingTrans
stopCookingTrans i Transition
stopCookingTrans source Cooking
stopCookingTrans target FinishedCooking
stopCookingTrans trigger stopCookingTrigger
stopCookingTrigger i Trigger
stopCookingTrigger event receiveStopCooking
receiveStopCooking i ReceiveSignalEvent
receiveStopCooking signal stopCooking
stopCooking i Signal

{* The current version of MicrowaveUML.pdf does not show any
  trigger on the transitions to the final states.  This means
  the state machines will never complete, but I am faithfully
  reproducing the model as shown.  *}
microwaveSMregion transition microwaveFinalTrans
microwaveFinalTrans i Transition
microwaveFinalTrans source FinishedCooking
microwaveFinalTrans target microwaveFinal

{* Food state machine *}
Food classifierBehavior foodSM
foodSM i StateMachine
foodSM region foodSMregion
foodSMregion i Region

{* Food state machine states *}
foodSMregion subvertex foodInitial
foodSMregion subvertex NotCooked
foodSMregion subvertex Cooked
foodSMregion subvertex foodFinal
foodInitial i PsuedoState
NotCooked i State
Cooked i State
foodFinal i FinalState

{* Food state machine transitions *}
foodSMregion transition foodInitialTrans
foodInitialTrans i Transition
foodInitialTrans source foodInitial
foodInitialTrans target NotCooked

foodSMregion transition cookedTrans
cookedTrans i Transition
cookedTrans source NotCooked
cookedTrans target Cooked
cookedTrans trigger cookedTrigger
cookedTrigger i Trigger
cookedTrigger event receiveCooked
receiveCooked i ReceiveSignalEvent
receiveCooked signal cooked
cooked i Signal

foodSMregion transition foodFinalTrans
foodFinalTrans i Transition
foodFinalTrans source Cooked
foodFinalTrans target foodFinal

{* Beeper state machine *}
Beeper classifierBehavior beeperSM
beeperSM i StateMachine
beeperSM region beeperSMregion
beeperSMregion i Region


{* Beeper state machine states *}
beeperSMregion subvertex beeperInitial
beeperSMregion subvertex Silent
beeperSMregion subvertex Beeping
beeperSMregion subvertex beeperFinal
beeperInitial i PsuedoState
Silent i State
Beeping i State
beeperFinal i FinalState

{* Beeper state machine transitions *}
beeperSMregion transition beeperInitialTrans
beeperInitialTrans i Transition
beeperInitialTrans source beeperInitial
beeperInitialTrans target Silent

beeperSMregion transition beepTrans
beepTrans i Transition
beepTrans source Silent
beepTrans target Beeping
beepTrans trigger beepTrigger
beepTrigger i Trigger
beepTrigger event receiveBeep
receiveBeep i ReceiveSignalEvent
receiveBeep signal beep
beep i Signal

beeperSMregion transition stopBeepingTrans
stopBeepingTrans i Transition
stopBeepingTrans source Beeping
stopBeepingTrans target Silent
stopBeepingTrans trigger stopBeepingTrigger
stopBeepingTrigger i Trigger
stopBeepingTrigger event receiveStopBeeping
receiveStopBeeping i ReceiveSignalEvent
receiveStopBeeping signal stopBeeping
stopBeeping i Signal

beeperSMregion transition beeperFinalTrans
beeperFinalTrans i Transition
beeperFinalTrans source Silent
beeperFinalTrans target beeperFinal

{* Do-action for microwave cooking state.
  Note that this is a parse-tree like structure,
  and we are writing it from the top down, so
  it seems kind of backwards. *}

Cooking doActivity CookingDo
CookingDo i Activity

{* write the new temperature *}
cookIncrement i AddStructuralFeatureAction
cookIncrement activity CookingDo
CookingDo node cookIncrement
cookIncrement isReplaceAll True
cookIncrement value newTemperature

{* evaluate the new temperature *}
newTemperature i Expression
newTemperature symbol ++
newTemperature operand oldTemperature
oldTemperature i ActionInputPin 

{* read the old temperature *}
oldTemperature fromAction readCurrentTemperature
readCurrentTemperature i ReadStructuralFeatureAction
readCurrentTemperature result currentTemperature
currentTemperature i OutputPin
readCurrentTemperature structuralFeature temperature
readCurrentTemperature object foodPin
foodPin i ActionInputPin

{* find the food *}
foodPin fromAction getFood
getFood i ReadStructuralFeatureAction
getFood result theFood
theFood i OutputPin
getFood structuralFeature cooks
getFood object selfActionInputPin
selfActionInputPin i ActionInputPin

{* find your own arse, using both hands *}
selfActionInputPin fromAction selfRead
selfRead i ReadSelfAction
selfRead result selfPin
selfPin i OutputPin


{* FinishedCooking entry action *}
FinishedCooking entry FinishedCookingEntry
FinishedCookingEntry i Activity

{* send cooked message to self.food *}
sendCooked i SendSignalAction
sendCooked activity FinishedCookingEntry
FinishedCookingEntry node sendCooked
sendCooked signal cooked

{* In retrospect, it would have been smart to include more context in
the activity element nodes, ie calling foodPin above something like
cookingDoFoodPin *}

sendCooked target foodPinB
foodPinB i ActionInputPin

{* find the food (B) *}
foodPinB fromAction getFoodB
getFoodB i ReadStructuralFeatureAction
getFoodB result theFoodB
theFoodB i OutputPin
getFoodB structuralFeature cooks
getFoodB object selfActionInputPinB
selfActionInputPinB i ActionInputPin

{* find your own arse, using both hands (B) *}
selfActionInputPinB fromAction selfReadB
selfReadB i ReadSelfAction
selfReadB result selfPinB
selfPinB i OutputPin


{* run-time elements, see UML 13.1 *}

{* all objects have empty event pools, but an event in the event pool
  of object o1 would be represented for example thus:
  o1 pool someEvent
  someEvent i ReceiveSignalEventOccurrence
*}

{* Each object is executing its classifier's behavior.
  They are the only behavior executions in this state. *}

{* Each of these behavior executions should have a causing event 13.1 Fig 13.2,
   presumably the creation event of their host. *}
m1classifierBehaviorExecution i BehaviorExecution
m1 execution m1classifierBehaviorExecution
m1classifierBehaviorExecution host m1
m1classifierBehaviorExecution behavior microwaveSM

f1classifierBehaviorExecution i BehaviorExecution
f1 execution f1classifierBehaviorExecution
f1classifierBehaviorExecution host f1
f1classifierBehaviorExecution behavior foodSM

b1classifierBehaviorExecution i BehaviorExecution
b1 execution b1classifierBehaviorExecution
b1classifierBehaviorExecution host b1
b1classifierBehaviorExecution behavior beeperSM

a1behaviorExecution i BehaviorExecution
a1 execution a1behaviorExecution
a1behaviorExecution host a1
{* external entity behavior undefined *}

{* object states, or rather,
 object classifier behavior state machine execution states *}
m1classifierBehaviorExecution activeState NotCooking
f1classifierBehaviorExecution activeState NotCooked
b1classifierBehaviorExecution activeState Silent

{* there are no enabled actions in this state, 
  but if bex had an enabled action, it would look like this:
  bex i BehaviorExecution
  bex behavior sillyActivity
  bex enabled sillyAction
  Or, perhaps there is no need to explicitly represent which
  actions are enabled, because the graph transformation rules
  will recognise them when it sees them.
*}



