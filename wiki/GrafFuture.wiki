#summary stuff that won't happen in 2010

== 2011 Introductory Work ==
These are tasks that we don't plan to do in 2010 but they should be simple enough to give the 2011 team an idea of how to modify GRAF.
  # *Understanding Rules* Create the rule !SendSignalAction-Mealy, add it to the GTSRuleSeq file and create a model that will use the rule.
  # *Understanding the GRAF code* Make it so objects aren't randomly placed on the screen. Make it so they're placed in such a way that they never overlap
  # *Understanding UML files* Complete the invoicer model (!InvoiceTest.modeltest and Invoicer.uml in the Models folder) according to how the papers describe it.
  http://graf-framework.googlecode.com/files/Invoicer.png

== Creating model files ==
  * This is the main thing preventing GRAF from being usable
  * We need a way to create uml model files with all features of the uml file format
  * Such a tool could be produced by someone else in the future
  * Making the tool could be a whole year long project by itself
  * It would be cool if it was part of GRAF
  * Ideal features for this tool would be a view of state, class and sequence diagram, where modifying 1 would change the others
  * We could extend Topcased since it's open source
  * We could abandon .uml and generate the graph from a text file

== Action language ==
There are currently standardisation efforts for the ALF action language going through the OMG. The 2011 team could seek to implement a high level action language parser based on this specification (more at http://www.omg.org/spec/ALF/). 
The benefits of this include:
  * Models would no longer be such a kludge
  * Behavior could be read in more easily
  * Relationships and operations would be easier to define

== General things ==
  * Implement [GRAFTimers timers]
  * Automated testing 
    * Would require a list of steps of execution
    * Annette would like this
  * Model Verification
    * Eg. that a 1:1 multiplicity isn't violated
    * We could verify just the initial state (if rules can't create invalid system states) or every system state in an execution
    * Annette would like this
  * Static methods (eg. constructors) - but no one is asking for this feature
  * You could make a logo for GRAF


== Stuff from 2009 ==
This stuff is really old and probably no longer as relevant
 * Animation Features
  ** Intelligent display navigation (a minimap)
  ** Display filtering (particularly important with large models)
  ** Support for automated animation
 * Potential application of graph logic to:
  ** Verify safety properties of system states
  ** Analyse and enforce model constraints (such as Object Constraint Language queries)
  ** Analyse feasibility of given system traces (for example, can a model satisfy a given  sequence diagram)
 * Development of reference animators for languages in need, including continuing development of our UML reference animator.
 * Engagement of many different educational institutions to help develop a tool used for modelling classes
 * Creating .uml files more easily - we could use annotations in the state machines in Topcased to represent actions and then add to GRAF the ability to translate these annotations into the proper actions