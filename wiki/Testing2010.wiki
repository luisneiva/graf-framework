#testing undertaken by the 2010 team

= Testing =

Testing has been performed throughout the project to ensure GRAF both continues to perform at an acceptable level and that added functionality is in working order. Testing on this page was performed within Eclipse on the Windows 7 Operating System.<br>

== Added Functionality ==

=== 1 - Regions ===

To test regions the model elevator.uml was used.

http://graf-framework.googlecode.com/files/RegionTest.png

=== 2 - Mealy Notation ===

To test the implementation of if statements the model Invoice Test.uml was used.

http://graf-framework.googlecode.com/files/InvoicerTest.png

=== 3 - If Statements ===

To test the implementation of if statements the model If Test.uml was used. When this model is created 2 instances of the invoice to invoicer relationship are instantiated. 1 instances Boolean test is set to true the other false. When traversing through the signals and subsequent actions (Do Stuff, self Read, read Test Value, Test Value, True Action) both instances will perform identically until the Test Value signal action pair is completed. The False instance will have True Action greyed out (as it is unavailable as the value is set to false) and the True instance will allow it to be clicked and subsequently create a standalone instance of the Invoice class. This test case has been carried out and confirmed to work. 

=== 4 - Methods ===

=== 5 - Convenience Features ===

==== 5.1 - Properties menu bar items ====

To test the convenience features in GRAF each feature was turned on individually and evaluated, and then each possible combination of the 4 features (Rules, Graphs, Debug and Timing). Each combination was performed over 1 run of the Racer.uml model following the signal action pair pattern Fire, End, End, Winner, Fire. This pattern was chosen as it ensured that the program was performing what was required and that it still worked when a signal action pair that did not have an effect in the current state was performed.

Example outputs from the first Fire action accepted.
{{{
Action name is AcceptEventAction
Action name is AcceptEventAction-WithActivity-HasBehavior
Rule Cancelled: object=r1, action=AcceptEventAction-WithActivity-HasBehavior, actionParam=signaloccurrence3 (Rule acceptEventAction-WithActivity-HasBehavior did not match)
Action name is AcceptEventAction-WithActivity-SameState
Rule Cancelled: object=r1, action=AcceptEventAction-WithActivity-SameState, actionParam=signaloccurrence3 (Rule acceptEventAction-WithActivity-SameState did not match)
Action name is AcceptEventAction-WithActivity-Main
Rule Cancelled: object=r1, action=AcceptEventAction-WithActivity-Main, actionParam=signaloccurrence3 (Rule acceptEventAction-WithActivity-Main did not match)
Action name is AcceptEventAction-WithActivity-Main-Mealy
Rule Cancelled: object=r1, action=AcceptEventAction-WithActivity-Main-Mealy, actionParam=signaloccurrence3 (Rule acceptEventAction-WithActivity-Main-Mealy did not match)
Action name is AcceptEventAction-WithActivity-Main-Mealy-SameState
Rule Cancelled: object=r1, action=AcceptEventAction-WithActivity-Main-Mealy-SameState, actionParam=signaloccurrence3 (Rule acceptEventAction-WithActivity-Main-Mealy-SameState did not match)
Rule Applied: object=r1, action=acceptEventAction-WithoutActivity, actionParam=signaloccurrence3
total rule application time = 97 milliseconds
Dot code written: GraphOutputs/state2.dot
Total model loading time: 0 milliseconds
}}}

== Performance & Scalability ==

Performance testing and a scalability analysis was performed. See [http://code.google.com/p/graf-framework/wiki/Testing here] for more details.