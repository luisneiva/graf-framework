#summary Tutorial on how to add rules

WORK IN PROGRESS

= Introduction =

This tutorial uses Create Link Action as an example for how to add rules to GRAF.

= 1. Identify the relevant UML Section =

  * For Create Link Action, it's 11.3.14.
  * The most important sections are:
    * Description: what the Action is supposed to do
{{{
Description 

This action can be used to create links and link objects. There is no return value in either case. This is so that no change
of the action is required if the association is changed to an association class or vice versa. CreateLinkAction uses a
specialization of LinkEndData called LinkEndCreationData, to support ordered associations. The insertion point is
specified at runtime by an additional input pin, which is required for ordered association ends and omitted for unordered
ends. The insertion point is an integer greater than 0 giving the position to insert the link, or unlimited, to insert at the
end. Reinserting an existing end at a new position in an ordered unique structural feature moves the end to that position.
CreateLinkAction also uses LinkEndCreationData to support the destruction of existing links of the association that
connect any of the objects of the new link. When the link is created, this option is available on an end-by-end basis, and
causes all links of the association emanating from the specified ends to be destroyed before the new link is created.
}}}

    * Attributes, Associations: these features are used during execution - they may need to be added to the model. 
{{{
Attributes
No additional attributes
}}}
    'No additional attributes' may mean that the Action inherits attributes from a parent Action.
{{{
Associations
â€¢ end Data : Link End Creation Data [2..*]
Specifies ends of association and inputs. (Redefines Link Action::end Data)
}}}

= 2. Modifying the UML Model =
This step might be unnecessary if the model already includes the Action.<br>

  # Add the Action to the model tree. Create Link Action is part of a Method in this model, so it should be added to one of Reply Action's Action Output Pins.
    # Add the Action Input Pin, and give it a unique name by editing the 'Name' field in the Properties view
    # Add Create Link Action as a child of the input pin, and give it a unique name
    # Fill in any other properties that will be used in implementing the rule. These are the Action's Attributes from the Specification
  # Add 'child' objects that correspond to the Action's Associations. Create Link Action needs at least two Link End Creation Data objects
    # Name and fill in the required properties of the child objects - you may not need all the fields.
  # Edit the Properties.txt file so that `Printgraphs` is set to true.
  # Run GRAF. Select the model you just edited and open it. Click through until the new Action becomes available - there's no need to click on it yet. 
  # Exit GRAF.

= 3. Editing the Rule Sequence File =

GRAF uses the GTSRulesSeq.xml file to determine which rule to apply when a particular Action is invoked. 
  # Add a new 'action' node to the file.
  # Give it 'name' and 'rule' child nodes.
  # Set the 'name' attribute to the name of the Action.
  # Set the 'rule' attribute to the name of the new rule.

= 4. Editing the Rules file =

== Stage 1: LHS ==
  # If you haven't already done so, run GRAF with Printgraphs set to true. Load the relevant model and click through to the state just before the new Action would be executed, then exit.
  # Use 'GraphOutputs/conversionFiles/dotToImg2 stateN.dot' (where N is the state just before the rule is applied) or the dotty.exe Graphviz program to view the state0.dot file generated from the model as a graph.
  # Find the Action that you added in the graph image and check that it 'makes sense'. Keep this file open. You might want to sketch the nodes involved in the Action - especially if they are scattered across the graph. Use this to make a draft of the rule using the Description from the Specification.
  # Open AGG from the 'agg_V164' folder in the GRAF repository.
    # Open the GRAF graph grammar.
    # Create the new rule node - give it an appropriate name.
    # Open the LHS window for that rule.
    # Add the nodes and edges to the LHS (pre-condition). Make sure that every node that will be used in the rule is included. 
      # Give the nodes and edges unique names, using the Attributes view.
      # Where you want to match a node or edge name to the graph, put the name in "double quotes". Where the name is a variable, don't use quotes.
    # Use the 'IR' button to generate a mapped right-hand-side for the rule.
    # Open the 'Attributes' view.
    # Open the 'Attribute Context' tab.
    # 'Check' the box in the 'In' column belonging to the nodes representing the host instance and the instance of the Action itself. This tells AGG what input parameters to expect when applying the rule, which it uses to 'match' to the graph. This also means that you don't have to worry as much about multiple matches.
    # Save the file. Keep AGG open.
  # Edit the Properties.txt file so that 'PrintRules' is set to true.
  # Run GRAF. The generated rule.dot files should be converted to images automatically. Open the new rule and check that it 'makes sense' - eg that there are no unexpected edges or spelling mistakes. If there are errors, return to AGG and fix the problem (if you need to do this, obviously close GRAF and restart).
  # Then click through the model until the new Action is available. Click on the Action. If the rule is applied with no errors, proceed to the next stage. Otherwise, there are two possible problems:
    # In the .xml file: either the Action name is not correct or the rule name doesn't match. If this occurs, simply fix the .xml file, save and try again.
    # In the rule file: the rule doesn't match. Usually, either:
      # The inputs are incorrect.
      # The "name" of a node or edge doesn't match the graph.
      # An edge is pointing in the wrong direction(!)
    # Use the stateN.dot (where N is the state just before the rule was applied) file to check that the rule LHS is accurate. Remember to create a new identic RHS and save before retrying.
    # If all else fails, remove nodes one by one until the rule matches. Then add the nodes and edges back in one at a time, testing each time.

== Stage 2: RHS ==
Now that you know that the LHS of the rule matches, make the necessary changes to the RHS to implement the Description. Test the new rule in GRAF as before. Remember to check the underlying graph and generated rule image - logic errors will not necessarily be obvious from the object diagram view.

= 5. Test and repeat =
When the rule is working, update the rule documentation to include the new rule, and any assumptions or deviations from the description that you made while implementing it.