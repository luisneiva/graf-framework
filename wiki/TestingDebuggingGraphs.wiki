#labels Phase-QA
==Background==
This page aims to demonstrate the role that graph images play in developing GRAF. To illustrate this point we will use an example of a feature that was implemented in 2010 and how we had to examine graphs to do this.

GRAF originally supported only single regions in state machines. The Elevator model, which we implemented in 2010, contains multiple state machine regions. Therefore we give GRAF this piece of UML functionality in order to be able to animate the model.

The Active-State edge appears in the graph when taking into account regions:
http://graf-framework.googlecode.com/files/regions%20output%20graph.jpg

Nodes 1,2,3,4 etc are the nodes for states. In a modeltest file, {state1;state2} means an object can be in both state1 and state2.
==Code changes==
We changed the code in the Graph-To-Obj-Diag class (under the package model/modelTransformer). This class is intended to read a graph and transfer a graph into an object diagram. 
  * First, in order to find Top-Region node, use List-Graph.toTrace to trace from elevator1 to Top-Region following ‘execution’ edge, ‘behaviour’ edge, and ‘region’ edge (as marked in blue). This sequence suits all models in GRAF.
  * Second, trace to all sub-regions when there exist multiple regions by following the ‘subvertex’ and ‘region’ edges. In this example, it will find Elevator-Region and Elevator2-Region (as marked in pink). Then, GRAF will display both states in one object.