== How GRAF works ==

This is a summary of the lesson Oscar gave at the meeting on the 18th March 2010.
This applies to the version of GRAF from the end of 2009.

=== Input files ===

When run GRAF you select a .modeltest file as the input. This is an example .modeltest file:
{{{
{code}
Microwave.uml

m1 : Microwave
{NotCooking}

f1 : Food
{NotCooked}
temperature = 3

b1 : Beeper
{Silent}

m1 <cookedBy, cooks> f1
m1 <in,has> b1
{code}
}}}

The first line is a reference to a .uml file. .uml files can be generated by Eclipse EMF. .uml files contain a model. For GRAF, the model will consist of a class diagram and state machines such as:
 
IMAGE TO ADD image:worksite:/Wiki attachments/MicrowaveUML.jpg|MicrowaveUML.jpg

Having a model is not enough to run GRAF. You need an instance of the model as well. The instance is specified in the remainder of the .modeltest file.
It creates objects of classes in the class diagram in the .uml file and it links the objects, sets their state machine states and sets their attributes.
For example, the above code makes an object f1 instance of the Food class. It is in the NotCooked state, its temperature attribute is three and it is linked to the m1 object.

A system state is a combination of model, instance and metamodel (eg. UML). From the .uml file and the .modeltest file, GRAF takes a system state as input.

=== Execution ===

GRAF represents the system state internally as one gigantic graph. GRAF also provides a graphical representation (an object diagram annotated with state information) to display to the user.

From a system state it is possible to transition to another system state. There are three ways to transition:
* Execute an action (click on the action)
* Accept an internal event (click on the event)
* Accept an external event (right click on an object and choose an event to send)

When this happens the graph behind the scenes is transformed and a new object diagram GUI is generated and the process starts again.

In order to find out how to transform the graph to the next system state, a graph transformation rule is used. All graph transformation rules are contained in GTSRules.ggx. Currently there are about 6 rules like AcceptEvent and SendSignal. You can change these rules without changing the GRAF code and the model's behaviour will change.

The diagram below should summarise the above. Next week I'll explain graphs in more detail.
 
IMAGE TO ADD image:worksite:/Wiki attachments/simplearch.jpg|simplearch.jpg}