Business Requirements
Background
Modellers resort to time consuming discussions and meetings in order to have consensus on a model and its meaning. Also, it is difficult to verify a groupâ€™s understandings with a consistent, unbiased and reference interpretation of a modelling language. This problem arises often with the Universal Modelling Language, but affects all modelling languages. Currently, there are animators for select modelling languages, but these are inflexible and not recognised as references for the language.
Business Opportunity
Improving collaborative modelling by providing the developer community with a centralised framework to build reference model animators for any modelling language.
Business Objective
Have the developer community add at least one definition for a modelling language and one group of modellers improve their collaborative understanding with the additions
Customer Need

   1. Developers: A reliable framework on which to add modelling language definitions for reference animation.
   2. Modellers: A clearly described reference definition of their particular model written in any modelling language.

Features
A model animator framework designed to support many modelling languages and assist in the communication of ideas animating models according to language definitions.
Vision of the solution
Vision Statement
The generic model animator is a model animator framework. It is for software developers who have a need to define modelling languages and modellers who need to use these definitions to communicate more effectively. The system is an animator that uses graph transformations to rigorously complete model state transitions to a level suitable for reference animators, and is designed to support languages like UML. Our product is a flexible animator framework that supports language definitions, unlike language specific animators already available.
Major Features

    * Reliably animate models by applying graph theory
    * Designed to support UML-like modelling language definitions as an example use-case.

Assumptions and Dependencies

    * Modellers will be providing files of models to be animated.
    * Users will have the Eclipse IDE.

Scope and Limitations
Scope of Initial Release
The initial release focuses on the attraction of developers to continue the project. It emphasises:
Functionality

    * Ability to define a modelling language as a graph
    * Support for complex graph transformations
    * A simple graphical user interface to visualise model animation

Usability

    * Ability to define actions as graph transformations for the language
    * A language definition for a small subset of UML as a guide
    * Support for animation of a simple UML model as a demonstration

Reliability

    * Use of a verified graph transformation engine to provide correctness.

Portability

    * All platforms supporting java and the Eclipse IDE will be supported.

Scope of Subsequent Releases
Functionality

    * A more advanced graphical user interface, with features such as intelligent model navigation, model filtering, etc
    * Support for automated animation
    * Extensive development of the UML language definition
          o Include a substantial subset of the UML language definition to form a reference animator
          o Recreation of a sequence diagram for a system execution trace
          o Ability to compare executed system traces and input sequence diagrams
    * Ability to undo any number of system transitions
    * Check the validity of input system sates
    * Check if Object Constraint Language constraints are met.

Usability

    * Streamlined ability to define actions as graph transformations for the language
    * A detailed guide to defining a modelling language as a graph transformation system with examples from the UML definition implemented.
    * The animation of a non trivial UML model demonstrating the reference capabilities of the system

Limitations and Exclusions

    * Ability to edit models will not be actively developed. Integration with the Eclipse IDE allows modellers to use their preferred modelling tools to create the models to animate, alongside the animator.