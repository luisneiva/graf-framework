= Introduction =

See Business Specifications, Vision and Scope document.

== Glossary ==

 * Development Documentation - Contains a guide to extending the framework to executable modelling languages, with reference to the example UML implementation, and a guide to improving the framework itself across all languages.
 * Eclipse IDE - General-purpose integrated development environment that supports plugin extensions.
 * Example UML implementation - The extension of the framework to an animator for UML provided.
 * Execution - the process of transforming a model instance between system states.
 * Extend - to specialise the framework to a model animator of a particular executable modelling language. (See SRS1.1.2.2)
 * Graph - A directed graph composed of nodes, as strings, and edges between nodes. Each edge has a label.
 * Graph transformation rule - Transforms the system state according to a before and after graph when applied
 * Language - the implementation of an executable modelling language with a runtime, within the framework.
 * Development Documentation - Contains a guide to extending the framework to executable modelling languages, with reference to the example UML implementation, and a guide to improving the framework itself across all languages.
 * Model - an instance of the modelling language’s meta-model.
 * Model instance - an instance of the model.
 * System state - An instantaneous snapshot of some point during execution, including
 * System transition - A transformation of one system state to another.
 * The framework - The Graph-based Reference Animator Framework that this document describes.
 * UML - Unified Modelling Language ([http://graf-framework.googlecode.com/files/OMG%20UML.pdf OMG UML])

 # ==Functionality (What our entire system can do)==
  ## The framework will:
   ## Complete system transitions using “The Attributed Graph Grammar System” engine. [http://user.cs.tu-berlin.de/~gragra/agg/ AGGSystem]
   ## Provide the ability to
    ## Display system states using arbitrary:
     ## Shapes
     ## Text
    ## Extend the framework to a model animator of a specific language by defining
     ## How graph transformation rules are associated with the actions of the language
     ## How a model is interpreted as a graph.
     ## How a system state is displayed.
    ## Accept:
     ## A model
     ## A model instance
     ## Allow the model instance to be executed when the model and the model instance are provided, and framework extended to a language (See SRS1.1.2).
  ## The example UML implementation will:
   ## Extend the framework (See SRS 1.1.2.2.1) by implementing an equivalent graph transformation rule interpretation of the following UML actions as speficied in the Object Management Group's UML definition ([http://graf-framework.googlecode.com/files/OMG%20UML.pdf OMG UML]):
    ## Actor Send Signal
    ## Accept Event
    ## Read Self
    ## Read Structural Feature
    ## Send Signal
   ## Display the complete system state as a UML object diagram with annotations.
   ## Be an extension of the framework using framework abilities provided in SRS1.1.2
   ## Require only the addition of graph transformation rules (See SRS1.1.2.2.1) to implement a larger subset of the UML definition.
   ## Allow the following UML model of a microwave heating food to be executed to completion: (link)
   ## Let the user manually select the next action to execute with the mouse cursor.
 # ==Usability (How easily can the user get that functionality)==
  ## The framework will:
   ## Require, for language extensions, modification in:
    ## One module for language rules at most
    ## One module for user interface and model rendering at most
    ## Less than 10 lines of code elsewhere
 # ==Portability==
  ## The framework will function as:
   ## As an Eclipse IDE plugin
   ## As a java stand alone application