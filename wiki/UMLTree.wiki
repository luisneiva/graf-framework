= What is the Eclipse UML tree? =
The tree is a file format to save UML diagrams. All types of UML diagrams can be stored in the tree: class, state, object, use case, sequence etc. The advantage of the Eclipse Tree is that you can use it with different Eclipse plugins. You can use one plugin to add a class diagram and then another to add an object diagram for it. [http://www.eclipse.org/modeling/mdt/uml2/docs/articles/Getting_Started_with_UML2/article.html This link] explains how to modify it.

= How the Eclipse UML tree works =
All nodes contain a type and a large number of properties. Type is important but other than _name_, most of the properties can be ignored. (Note for GRAF to work, all name fields should be unqiue) The parent-child relationships of the nodes is the most important piece of information for a certain node.

The tree contains nodes for class diagrams and state machines and basically everything in UML. What interests us is the Actions, because all the other things can be created easily by using other tools, rather than directly editting the tree. In the tree, actions will only occur within _Activity_ subtrees, which usually occur within state machine parts of the tree.

A simple action language statement like _generate cook across cooks_ is represented by a number of nodes (these are UML tree nodes, not to be confused with nodes in a graph).

Below is the UML tree for _generate cook across cooks_.

http://graf-framework.googlecode.com/files/sendsignaluml.jpg

{{{
IMPORTANT CLARIFICATION

This page talks about "UML actions" and "Action language"
Action language refers to the code you see inside boxes in state machines. For example, ords = ords->excluding(o); or generate x across y;
UML actions refer to the actions defined in part II of the UML definition. For example, ReadStructuralFeatureAction and SendSignalAction.
UML actions can be thought of as primitives for Action Language.

}}}

== Action nodes ==
These are a certain type of node in the UML tree. The _generate cook across cooks_ UML action actually contains 3 action nodes: !ReadSelfAction, !ReadStructuralFeatureAction and !SendSignalAction. The actions are embedded within each other. !SendSignalAction is on top. !SendSignalAction calls !ReadStructuralFeatureAction to find out where to send the signal to. !ReadStructuralFeatureAction calls !ReadSelfAction because, for some reason, that's always at the bottom of the call-tree. Also note that in the properties of !SendSignalAction it says what event to send (cook in this case) and in the properties of !ReadStructuralFeatureAction it says what link to follow (cooks in this case).

== Pin nodes ==
The action nodes are connected by !ActionInputPins. I'm not sure what they do exactly, but you need to put one of them between all action nodes. !OutputPins appear as child nodes of action nodes that have output (eg. !ReadStructuralFeatureAction and !ReadSelfAction but not !SendSignalAction) (ie. anything not at the top of the action node tree I think). There should also be !InputPins, but I've never seen them used.

= How Action Language statements correspond to UML Actions =
|| Action Language || UML actions ||
|| get x across y; generate z to x	|| 1 !ReadSelfAction ||
|| || 2 !ReadStructuralFeatureAction (get y link) ||
|| || 3 !SendSignalAction (includes z) ||
||get x across y; y.attribute++ || 1 !ReadSelfAction ||
|| || 2 !ReadStrucutalFeatureAction (get y link) ||
|| || 3 !ReadStrucutalFeatureAction (get attribute) ||
|| || 4 !AddStructuralFeatureValueAction (takes a string expression for the ++) ||

= How UML Actions correspond to Action Language =
|| UML Action || Example Use ||
|| !ReadSelfAction || (Used in every single action) ||
|| !ReadStructuralFeatureAction || Used to read links, attributes to modify etc ||
|| !SendSignalAction || Used only in generate x to y type statements ||
|| !AddStructuralFeatureValueAction || Used in any kind of arithmetic eg. x++ but could be used for other things? ||

[http://graf-framework.googlecode.com/files/VIDE_D61.pdf This article] explains all UML Actions in terms of Action Language. Just ctrl-f the name of an action and you can find an example of how the action is used.

= List of UML Actions =

= Relevant link =
This [http://research.cs.queensu.ca/~stl/internal/uml2/unlocked/working/actions/PrioritizingActions_v1.doc link] categorizes the actions really well.

These are most of the actions listed in the UML definition. Some of these actions might be generalisations of other actions, which means we donâ€™t need to implement them.

|| Section in UML Definition and Name || Status ||
|| 11.3.1 !AcceptCallAction || Research needed || 
|| 11.3.2 !AcceptEventAction || DONE || 
|| 11.3.5 !AddStructuralFeatureValueAction || DONE ||  
|| 11.3.6 !AddVariableValueAction || Research needed ||  
|| 11.3.7 !BroadcastSignalAction || Research needed ||  
|| 11.3.8 !CallAction || Research needed || 
|| 11.3.9 !CallBehaviorAction || Research needed ||  
|| 11.3.10 !CallOperationAction || Research needed ||  
|| 11.3.11 !ClearAssociationAction || Research needed ||  
|| 11.3.12 !ClearStructuralFeatureAction || Research needed ||  
|| 11.3.13 !ClearVariableAction || Research needed || 
|| 11.3.14 !CreateLinkAction || Research needed ||  
|| 11.3.15 !CreateLinkObjectAction || Research needed ||  
|| 11.3.16 !CreateObjectAction || DONE ||  
|| 11.3.17 !DestroyLinkAction || Research needed ||  
|| 11.3.18 !DestroyObjectAction || Research needed ||  
|| 11.3.20 !InvocationAction || Research needed ||  
|| 11.3.21 1LinkAction || Research needed ||  
|| 11.3.26 !OpaqueAction || Research needed ||  
|| 11.3.30 !RaiseExceptionAction || Research needed ||  
|| 11.3.31 !ReadExtentAction || Research needed ||  
|| 11.3.32 !ReadIsClassifiedObjectAction || Research needed ||  
|| 11.3.33 !ReadLinkAction || Research needed ||  
|| 11.3.34 !ReadLinkObjectEndAction || Research needed ||  
|| 11.3.35 !ReadLinkObjectEndQualifierAction || Research needed ||  
|| 11.3.36 !ReadSelfAction || DONE ||  							
|| 11.3.37 !ReadStructuralFeatureAction || DONE || 
|| 11.3.38 !ReadVariableAction || Research needed ||  
|| 11.3.39 !ReclassifyObjectAction || Research needed ||  
|| 11.3.40 !ReduceAction || Research needed ||  
|| 11.3.41 !RemoveStructuralFeatureValueAction || Research needed ||  
|| 11.3.42 !RemoveVariableValueAction || Research needed ||  
|| 11.3.43 !ReplyAction || Research needed ||  
|| 11.3.44 !SendObjectAction || Research needed ||  
|| 11.3.45 !SendSignalAction || DONE || 
|| 11.3.46 !StartClassifierBehaviorAction || Research needed ||  
|| 11.3.47 !StructuralFeatureAction || Research needed ||  
|| 11.3.48 !TestIdentityAction || Research needed ||  
|| 11.3.49 !UnmarshallAction || Research needed ||  
|| 11.3.51 !ValueSpecificationAction || Research needed ||  
|| 11.3.52 !VariableAction || Research needed ||  
|| 11.3.53 !WriteLinkAction || Research needed ||  
|| 11.3.54 !WriteStructuralFeatureAction || Research needed ||  
|| 11.3.55 !WriteVariableAction || Research needed ||  